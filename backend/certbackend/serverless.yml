org: dlg94490 # chang to your personal app orginazation
app: testhttp   # chang to your personal app 
service: certbackend
frameworkVersion: '3'

custom:
  requestTableName: '${self:service}request-table-${sls:stage}'

provider:
  httpApi:
    cors: true
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  profile: roc_serverless
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ RequestTable, Arn ]
  # environment:
  #   USERS_TABLE: ${self:custom.tableName}

functions:
  hello:
    handler: helloWorld.handler
    events:
      - httpApi:
          path: /hello
          method: get
  createRequest:
    handler: createRequest.createRequest
    events:
      - httpApi:
          path: /request
          method: post
    environment:
      REQUEST_TABLE: ${self:custom.requestTableName}
    role: dynamoRole

  listItems:
    handler: listItems.listItems
    events:
      - httpApi:
          path: /board/{model}
          method: get
    environment:
      REQUEST_TABLE: ${self:custom.requestTableName}
  getItem:
    handler: getItem.getItem
    events:
      - httpApi:
          path: /board/{model}/{id}
          method: get
    environment:
      REQUEST_TABLE: ${self:custom.requestTableName}
    role: dynamoRole

resources:
  Resources:
    dynamoRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: DynamoRole2
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action: sts:AssumeRole
          Policies:
            - PolicyName: dynamoPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource:
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:logs'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'log-group:/aws/lambda/*:*:*'
                  - Effect: Allow
                    Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                    Resource:
                      - Fn::GetAtt: [RequestTable, Arn]
    RequestTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.requestTableName}
